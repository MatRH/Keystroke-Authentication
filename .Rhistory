j=j+x$Solar.R[i];
l=l+1;}
i=i+1;
}
j=j/l;
i=1;
j=0;
l=0;
while(i<=nrow(x))
{
if((!is.na(x[i,4]))>31 && (x$Temp[i])>90)
{
g<-list(Solar.R[i]);
j=j+x$Solar.R[i];
l=l+1;}
i=i+1;
}
j=j/l;
g
j
i=1;
j=0;
l=0;
while(i<=nrow(x))
{
if((!is.na(x[i,1]))>31 && (x[i,4])>90)
{
g<-list(Solar.R[i]);
j=j+x$Solar.R[i];
l=l+1;}
i=i+1;
}
j=j/l;
j
i=1;
j=0;
l=0;
while(i<=nrow(x))
{
if((!is.na(x[i,1]))>31 && (x[i,4])>90)
{
g<-list(Solar.R[i]);
j=j+x[i,2];
l=l+1;}
i=i+1;
}
j=j/l;
j
i=1;
j=0;
l=0;
while(i<=nrow(x))
{
if(!(is.na(x[i,1]))>31 && (x[i,4])>90)
{
g<-list(Solar.R[i]);
j=j+x[i,2];
l=l+1;}
i=i+1;
}
j=j/l;
i=1;
j=0;
l=0;
while(i<=nrow(x))
{
if(!(is.na(x[i,1]))>31 && (x[i,4])>90)
{
j=j+x[i,2];
l=l+1;}
i=i+1;
}
j=j/l;
j
i=1;
j=0;
l=0;
while(i<=nrow(x))
{
if(!(is.na(x[i,1])) && (x[i,4])>90 && x[i,1]>31)
{
j=j+x[i,2];
l=l+1;}
i=i+1;
}
j=j/l;
j
q()
predicted = predict(logistic,x_test)
x <- cbind(x_train,y_train)
logistic <- glm(y_train ~ ., data = x,family = 'binomial')
summary(logistic)
predicted = predict(logistic,x_test)
from sklearn.linear_model import LogisticRegression
model = Logistic regression object
model.fir(x,y)
model.score(x,y)
print('Coefficient: \n', model.coef_)
print('Intercept: \n', model.intercept_)
predicted=model.predict(x_test)
x <- cbind(x_train,y_train)
logistic <- glm(y_train ~ ., data = x,family = 'binomial')
summary(logistic)
predicted = predict(logistic,x_test)
iris
iris
iris <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"), header = FALSE)
names(iris) <- c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")
library(ggvis)
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()
iris %>% ggvis(~Petal.Length, ~Petal.Width, fill = ~Species) %>% layer_points()
iris <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"), header = FALSE)
iris
read(iris)
str(iris)
table(iris$Species)
round(prop.table(table(iris$Species)) * 100, digits = 1)
summary(iris)
summary(iris[c("Petal.Width", "Sepal.Width")])
q()
for(i in 1 to 10000)
for(i in 1:10000)
print('5 ')
x<-c("a","b","c")
y<-c(1,2,3)
names(y)<-x
y
strt(x)
str(x)
as.integer(2.4)
as.logical(1.0)
as.logical(0.0)
as.integer("2.4")
as.number("2.4")
as.numeric("2.4")
`length<-.factor`(x)
length(x)
a<-X("A",1,TRUE)
a<-c("A",1,TRUE)
a
TRUE
a<-c(1,TRUE,2.4)
a
matrix(1:3,nrow=2,ncol=3,byrow=TRUE
)
matrix(1:4,nrow=2,ncol=3,byrow=TRUE
)
cbind(1:2,1:4)
rbind(1:2,1:4)
rbind(LETTERS[1:6])
rbind(LETTERS[1:6],nrow=2)
rbind(LETTERS[1:6],7:10)
x<-matrix(1:6,nrow=2)
x
rowNames(x)<c("a","b")
rowName(x)<c("a","b")
help(reow)
help(row)
help(rownames)
rownames(x)<c("a","b")
x
rownames(x)<-c("a","b")
x
m<-matrix(sample(1:100,36),nrow=6)
m
m[1,2]
m[1]
m[1,]
m[,1]
m[1,2:3]
m[1:4,]
help(avg)
help(??avg)
?avg
sum(x)
sum(m)
X<-c(1,2,3)
names(x)<-c("a","b","c")
x
x
X
names(X)<-c("a","b","c")
X
mean(x)
mean(X)
seq(2,6,by=3)
seq(2,6,by=2)
help(seq)
x<-matrix(sample(1:4,6),nrow=2)
x<-matrix(sample(1:10,6),nrow=2)
x
x<-matrix(sample(1:10,6),nrow=3)
x<-matrix(sample(1:10,6),nrow=2)
y<-matrix(sample(1:10,6),nrow=3)
x
y
x*y
z<-c("a","b","c,"a","o","b","a")
z<-c("a","b","c","a","o","b","a")
z
factor(x)
factor(z)
levels(z)
levels()
help("levels")
levels(z)<-c("a","b","c")
z
factor(z)
x<-list(title="askjasdkas",num=5)
x
str(x)
x[1]
x$title
x[[1]]
x$title&num
x<-list(title="askjasdkas",num=5,list(title1="hhhhhhh",num1=10))
x
str(x)
x<-list(title="askjasdkas",num=5,innerlist=list(title1="hhhhhhh",num1=10))
str(x)
x$innerlist$title1
x[c(1,3)]
x[c(1,2)]
x[c(TRUE,FALSE,TRUE,FALSE)]
x[["vec]]<-c(1:10)
;
;
;
;
;
;
;s
sas
a
s
x
y<-list("sahsja",10)
y[["vec"]]<-c(1,2)
y
4 OR 3
help(or)
help(OR
)
or
4|3
0|1
0|0
as.integer(4|3)
4||3
as.integer(4|||3)
as.integer(4||3)
4^3
d
s
sd
help(||)
help(|)
help('||')
outer(x,x,|)
outer(x,x,
|)
outer(x,x,
|)
outer(x,x,"|")
knn
help(knn)
require("knn")
help("knn")
help(knn)
0.8*700
+0.2*150
0.8*220+.2*150
0.8*200+.2*150
7/20
7/20*30+(1-7/20)*150
username="deepak"
for(i in 1:nrow(all_users))
{
if(all_users[i,1]==username)
user_details<-all_users[i,]
}
pwd_len<-as.numeric(user_details[2])
num_pwd_stored=0
user_timing_details=array(0,ncol(user_details)-4+1)
for(i in 1:length(user_timing_details))
user_timing_details[i]=as.numeric(user_details[i+3])
total_timing=array(0,pwd_len)
pwd_timing=c()
while(1)
{
if((num_pwd_stored*pwd_len+1)>length(user_timing_details))
break
if(is.na(user_timing_details[num_pwd_stored*pwd_len+1]))
break
cur_pwd_timing=user_timing_details[(num_pwd_stored*pwd_len+1):((num_pwd_stored+1)*pwd_len)]
temp_array=cur_pwd_timing
for(i in 2:pwd_len)
{
cur_pwd_timing[i]=cur_pwd_timing[i]-temp_array[i-1]
total_timing[i]=total_timing[i]+cur_pwd_timing[i]
}
cur_pwd_timing[1]=0
num_pwd_stored=num_pwd_stored+1
pwd_timing=rbind(pwd_timing,cur_pwd_timing)
}
avg_pwd_timing=total_timing/num_pwd_stored
#Euclidean distances
anomaly=array(0,num_pwd_stored)
for(i in 1:num_pwd_stored)
{
cur_avg_arr=array(0,pwd_len)
cur_test_arr=pwd_timing[i,]
cur_total_arr=array(0,pwd_len)
for(j in 1:num_pwd_stored)
{
if(i==j)
next
cur_total_arr=cur_total_arr+pwd_timing[j,]
}
cur_avg_arr=cur_total_arr/(num_pwd_stored-1)
cur_euclidean_dist=0
for(j in 1:pwd_len)
{
cur_euclidean_dist=cur_euclidean_dist+(cur_test_arr[j]-cur_avg_arr[j])^2
}
cur_euclidean_dist=sqrt(cur_euclidean_dist)
anomaly[i]=cur_euclidean_dist
}
threshold=mean(anomaly)
threshold
for(i in 1:nrow(all_users))
{
if(all_users[i,1]==username)
user_details<-all_users[i,]
}
pwd_len<-as.numeric(user_details[2])
num_pwd_stored=0
user_timing_details=array(0,ncol(user_details)-4+1)
for(i in 1:length(user_timing_details))
user_timing_details[i]=as.numeric(user_details[i+3])
total_timing=array(0,pwd_len)
pwd_timing=c()
while(1)
{
if((num_pwd_stored*pwd_len+1)>length(user_timing_details))
break
if(is.na(user_timing_details[num_pwd_stored*pwd_len+1]))
break
cur_pwd_timing=user_timing_details[(num_pwd_stored*pwd_len+1):((num_pwd_stored+1)*pwd_len)]
temp_array=cur_pwd_timing
for(i in 2:pwd_len)
{
cur_pwd_timing[i]=cur_pwd_timing[i]-temp_array[i-1]
total_timing[i]=total_timing[i]+cur_pwd_timing[i]
}
cur_pwd_timing[1]=0
num_pwd_stored=num_pwd_stored+1
pwd_timing=rbind(pwd_timing,cur_pwd_timing)
}
avg_pwd_timing=total_timing/num_pwd_stored
#Euclidean distances
anomaly=array(0,num_pwd_stored)
for(i in 1:num_pwd_stored)
{
cur_avg_arr=array(0,pwd_len)
cur_test_arr=pwd_timing[i,]
cur_total_arr=array(0,pwd_len)
for(j in 1:num_pwd_stored)
{
if(i==j)
next
cur_total_arr=cur_total_arr+pwd_timing[j,]
}
cur_avg_arr=cur_total_arr/(num_pwd_stored-1)
cur_euclidean_dist=0
for(j in 1:pwd_len)
{
cur_euclidean_dist=cur_euclidean_dist+(cur_test_arr[j]-cur_avg_arr[j])^2
}
cur_euclidean_dist=sqrt(cur_euclidean_dist)
anomaly[i]=cur_euclidean_dist
}
threshold=mean(anomaly)
for(i in 1:nrow(all_users))
{
if(all_users[i,1]==username)
user_details<-all_users[i,]
}
pwd_len<-as.numeric(user_details[2])
setwd("C:/xampp/htdocs/keystroke")
for(i in 1:nrow(all_users))
{
if(all_users[i,1]==username)
user_details<-all_users[i,]
}
pwd_len<-as.numeric(user_details[2])
num_pwd_stored=0
user_timing_details=array(0,ncol(user_details)-4+1)
for(i in 1:length(user_timing_details))
user_timing_details[i]=as.numeric(user_details[i+3])
total_timing=array(0,pwd_len)
pwd_timing=c()
while(1)
{
if((num_pwd_stored*pwd_len+1)>length(user_timing_details))
break
if(is.na(user_timing_details[num_pwd_stored*pwd_len+1]))
break
cur_pwd_timing=user_timing_details[(num_pwd_stored*pwd_len+1):((num_pwd_stored+1)*pwd_len)]
temp_array=cur_pwd_timing
for(i in 2:pwd_len)
{
cur_pwd_timing[i]=cur_pwd_timing[i]-temp_array[i-1]
total_timing[i]=total_timing[i]+cur_pwd_timing[i]
}
cur_pwd_timing[1]=0
num_pwd_stored=num_pwd_stored+1
pwd_timing=rbind(pwd_timing,cur_pwd_timing)
}
avg_pwd_timing=total_timing/num_pwd_stored
#Euclidean distances
anomaly=array(0,num_pwd_stored)
for(i in 1:num_pwd_stored)
{
cur_avg_arr=array(0,pwd_len)
cur_test_arr=pwd_timing[i,]
cur_total_arr=array(0,pwd_len)
for(j in 1:num_pwd_stored)
{
if(i==j)
next
cur_total_arr=cur_total_arr+pwd_timing[j,]
}
cur_avg_arr=cur_total_arr/(num_pwd_stored-1)
cur_euclidean_dist=0
for(j in 1:pwd_len)
{
cur_euclidean_dist=cur_euclidean_dist+(cur_test_arr[j]-cur_avg_arr[j])^2
}
cur_euclidean_dist=sqrt(cur_euclidean_dist)
anomaly[i]=cur_euclidean_dist
}
threshold=mean(anomaly)
username
user_details
all_users<-read.csv("timing.csv",header=FALSE)
#Get the user details
for(i in 1:nrow(all_users))
{
if(all_users[i,1]==username)
user_details<-all_users[i,]
}
pwd_len<-as.numeric(user_details[2])
num_pwd_stored=0
pwd_len
all_users<-read.csv("timing.csv",header=FALSE)
#Get the user details
for(i in 1:nrow(all_users))
{
if(all_users[i,1]==username)
user_details<-all_users[i,]
}
pwd_len<-as.numeric(user_details[2])
num_pwd_stored=0
user_timing_details=array(0,ncol(user_details)-4+1)
for(i in 1:length(user_timing_details))
user_timing_details[i]=as.numeric(user_details[i+3])
total_timing=array(0,pwd_len)
pwd_timing=c()
while(1)
{
if((num_pwd_stored*pwd_len+1)>length(user_timing_details))
break
if(is.na(user_timing_details[num_pwd_stored*pwd_len+1]))
break
cur_pwd_timing=user_timing_details[(num_pwd_stored*pwd_len+1):((num_pwd_stored+1)*pwd_len)]
temp_array=cur_pwd_timing
for(i in 2:pwd_len)
{
cur_pwd_timing[i]=cur_pwd_timing[i]-temp_array[i-1]
total_timing[i]=total_timing[i]+cur_pwd_timing[i]
}
cur_pwd_timing[1]=0
num_pwd_stored=num_pwd_stored+1
pwd_timing=rbind(pwd_timing,cur_pwd_timing)
}
avg_pwd_timing=total_timing/num_pwd_stored
#Euclidean distances
anomaly=array(0,num_pwd_stored)
for(i in 1:num_pwd_stored)
{
cur_avg_arr=array(0,pwd_len)
cur_test_arr=pwd_timing[i,]
cur_total_arr=array(0,pwd_len)
for(j in 1:num_pwd_stored)
{
if(i==j)
next
cur_total_arr=cur_total_arr+pwd_timing[j,]
}
cur_avg_arr=cur_total_arr/(num_pwd_stored-1)
cur_euclidean_dist=0
for(j in 1:pwd_len)
{
cur_euclidean_dist=cur_euclidean_dist+(cur_test_arr[j]-cur_avg_arr[j])^2
}
cur_euclidean_dist=sqrt(cur_euclidean_dist)
anomaly[i]=cur_euclidean_dist
}
threshold=mean(anomaly)
threshold
avg_pwd_timing
